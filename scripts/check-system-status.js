#!/usr/bin/env node

const axios = require('axios');
const { exec } = require('child_process');
const path = require('path');

console.log('üîç VERIFICANDO ESTADO DEL SISTEMA COMPLETO\n');

const API_BASE_URL = 'http://localhost:3001';
const FRONTEND_URL = 'http://localhost:3000';

// Funci√≥n para verificar si un puerto est√° en uso
function checkPort(port) {
  return new Promise((resolve) => {
    const net = require('net');
    const socket = new net.Socket();
    
    socket.setTimeout(2000);
    
    socket.on('connect', () => {
      socket.destroy();
      resolve(true);
    });
    
    socket.on('timeout', () => {
      socket.destroy();
      resolve(false);
    });
    
    socket.on('error', () => {
      resolve(false);
    });
    
    socket.connect(port, 'localhost');
  });
}

// Funci√≥n para verificar la API del backend
async function checkBackendAPI() {
  try {
    console.log('üåê Verificando API del Backend...');
    const response = await axios.get(`${API_BASE_URL}/health`, { timeout: 5000 });
    console.log('‚úÖ Backend API funcionando correctamente');
    console.log(`   Status: ${response.status}`);
    console.log(`   Response: ${JSON.stringify(response.data)}`);
    return true;
  } catch (error) {
    console.log('‚ùå Error en Backend API:');
    if (error.code === 'ECONNREFUSED') {
      console.log('   El servidor no est√° corriendo en el puerto 3001');
    } else if (error.code === 'ENOTFOUND') {
      console.log('   No se puede resolver localhost');
    } else {
      console.log(`   ${error.message}`);
    }
    return false;
  }
}

// Funci√≥n para verificar la base de datos
async function checkDatabase() {
  try {
    console.log('\nüóÑÔ∏è Verificando conexi√≥n a Base de Datos...');
    const response = await axios.get(`${API_BASE_URL}/health/database`, { timeout: 5000 });
    console.log('‚úÖ Base de datos conectada correctamente');
    console.log(`   Status: ${response.status}`);
    console.log(`   Response: ${JSON.stringify(response.data)}`);
    return true;
  } catch (error) {
    console.log('‚ùå Error en Base de Datos:');
    console.log(`   ${error.message}`);
    return false;
  }
}

// Funci√≥n para verificar el frontend
async function checkFrontend() {
  try {
    console.log('\nüé® Verificando Frontend...');
    const response = await axios.get(FRONTEND_URL, { timeout: 5000 });
    console.log('‚úÖ Frontend funcionando correctamente');
    console.log(`   Status: ${response.status}`);
    return true;
  } catch (error) {
    console.log('‚ùå Error en Frontend:');
    if (error.code === 'ECONNREFUSED') {
      console.log('   El servidor de desarrollo no est√° corriendo en el puerto 3000');
    } else {
      console.log(`   ${error.message}`);
    }
    return false;
  }
}

// Funci√≥n para verificar puertos
async function checkPorts() {
  console.log('\nüîå Verificando puertos...');
  
  const backendPort = await checkPort(3001);
  const frontendPort = await checkPort(3000);
  
  console.log(`   Puerto 3001 (Backend): ${backendPort ? '‚úÖ En uso' : '‚ùå Libre'}`);
  console.log(`   Puerto 3000 (Frontend): ${frontendPort ? '‚úÖ En uso' : '‚ùå Libre'}`);
  
  return { backendPort, frontendPort };
}

// Funci√≥n para mostrar instrucciones de inicio
function showStartInstructions() {
  console.log('\nüöÄ INSTRUCCIONES PARA INICIAR EL SISTEMA:\n');
  
  console.log('1Ô∏è‚É£ INICIAR BACKEND:');
  console.log('   cd resto-sql/backend');
  console.log('   npm run start:dev');
  console.log('');
  
  console.log('2Ô∏è‚É£ INICIAR FRONTEND (en otra terminal):');
  console.log('   cd resto-sql/frontend');
  console.log('   npm start');
  console.log('');
  
  console.log('3Ô∏è‚É£ VERIFICAR CONEXI√ìN:');
  console.log('   Abrir http://localhost:3000/test en el navegador');
  console.log('');
  
  console.log('4Ô∏è‚É£ ACCEDER AL SISTEMA:');
  console.log('   Abrir http://localhost:3000 en el navegador');
  console.log('   Usar credenciales de prueba: admin/admin');
  console.log('');
}

// Funci√≥n para mostrar informaci√≥n del sistema
function showSystemInfo() {
  console.log('\nüìã INFORMACI√ìN DEL SISTEMA:\n');
  
  console.log('üè™ SISTEMA DE RESTAURANTE:');
  console.log('   ‚Ä¢ Gesti√≥n de pedidos en tiempo real');
  console.log('   ‚Ä¢ 3 Mesas + 2 Barra + 5 Delivery');
  console.log('   ‚Ä¢ Sistema de reservas');
  console.log('   ‚Ä¢ Combos personalizables');
  console.log('   ‚Ä¢ Estados autom√°ticos');
  console.log('');
  
  console.log('üë• ROLES DISPONIBLES:');
  console.log('   ‚Ä¢ ADMIN - Control total del sistema');
  console.log('   ‚Ä¢ MOZO - Crear y gestionar pedidos');
  console.log('   ‚Ä¢ COCINERO - Preparar pedidos');
  console.log('   ‚Ä¢ CAJA - Gestionar pagos');
  console.log('   ‚Ä¢ BARRA - Gesti√≥n de bebidas');
  console.log('');
  
  console.log('üîß TECNOLOG√çAS:');
  console.log('   ‚Ä¢ Backend: NestJS + Prisma + PostgreSQL');
  console.log('   ‚Ä¢ Frontend: React + TypeScript');
  console.log('   ‚Ä¢ Base de Datos: Supabase (PostgreSQL)');
  console.log('   ‚Ä¢ Autenticaci√≥n: JWT');
  console.log('');
}

// Funci√≥n principal
async function main() {
  try {
    console.log('üéØ VERIFICACI√ìN COMPLETA DEL SISTEMA DE RESTAURANTE\n');
    
    // Verificar puertos
    const ports = await checkPorts();
    
    // Verificar servicios
    const backendAPI = await checkBackendAPI();
    const database = await checkDatabase();
    const frontend = await checkFrontend();
    
    // Resumen
    console.log('\nüìä RESUMEN DEL ESTADO:\n');
    console.log(`   Backend API: ${backendAPI ? '‚úÖ' : '‚ùå'}`);
    console.log(`   Base de Datos: ${database ? '‚úÖ' : '‚ùå'}`);
    console.log(`   Frontend: ${frontend ? '‚úÖ' : '‚ùå'}`);
    console.log(`   Puerto 3001: ${ports.backendPort ? '‚úÖ' : '‚ùå'}`);
    console.log(`   Puerto 3000: ${ports.frontendPort ? '‚úÖ' : '‚ùå'}`);
    
    const allWorking = backendAPI && database && frontend && ports.backendPort && ports.frontendPort;
    
    if (allWorking) {
      console.log('\nüéâ ¬°SISTEMA COMPLETAMENTE FUNCIONAL!');
      console.log('   Puedes acceder a:');
      console.log('   ‚Ä¢ Frontend: http://localhost:3000');
      console.log('   ‚Ä¢ Prueba de conexi√≥n: http://localhost:3000/test');
      console.log('   ‚Ä¢ API Backend: http://localhost:3001');
    } else {
      console.log('\n‚ö†Ô∏è PROBLEMAS DETECTADOS');
      showStartInstructions();
    }
    
    showSystemInfo();
    
  } catch (error) {
    console.error('‚ùå Error durante la verificaci√≥n:', error.message);
    showStartInstructions();
  }
}

// Ejecutar verificaci√≥n
main();
