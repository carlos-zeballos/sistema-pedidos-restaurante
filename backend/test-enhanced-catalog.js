const axios = require('axios');

const BASE_URL = 'http://localhost:3001';

console.log('üé® PRUEBA: CAT√ÅLOGO MEJORADO');
console.log('============================');

async function testEnhancedCatalog() {
  try {
    console.log('\n1Ô∏è‚É£ Verificando endpoints del cat√°logo...');
    
    const [categoriesRes, productsRes, combosRes, spacesRes] = await Promise.all([
      axios.get(`${BASE_URL}/catalog/public/categories`),
      axios.get(`${BASE_URL}/catalog/public/products`),
      axios.get(`${BASE_URL}/catalog/public/combos`),
      axios.get(`${BASE_URL}/catalog/public/spaces`)
    ]);
    
    console.log(`‚úÖ Categor√≠as: ${categoriesRes.data.length} encontradas`);
    console.log(`‚úÖ Productos: ${productsRes.data.length} encontrados`);
    console.log(`‚úÖ Combos: ${combosRes.data.length} encontrados`);
    console.log(`‚úÖ Espacios: ${spacesRes.data.length} encontrados`);
    
    // 2. Analizar la estructura de productos para el nuevo dise√±o
    console.log('\n2Ô∏è‚É£ Analizando estructura de productos...');
    
    if (productsRes.data.length > 0) {
      const sampleProduct = productsRes.data[0];
      console.log('üìù Estructura de producto de ejemplo:');
      console.log(`   - ID: ${sampleProduct.id}`);
      console.log(`   - Nombre: ${sampleProduct.name}`);
      console.log(`   - C√≥digo: ${sampleProduct.code}`);
      console.log(`   - Precio: $${sampleProduct.price}`);
      console.log(`   - Tipo: ${sampleProduct.type}`);
      console.log(`   - Categor√≠a ID: ${sampleProduct.categoryId}`);
      console.log(`   - Tiempo preparaci√≥n: ${sampleProduct.preparationTime || 'No especificado'} min`);
      console.log(`   - Habilitado: ${sampleProduct.isEnabled ? 'S√≠' : 'No'}`);
      console.log(`   - Disponible: ${sampleProduct.isAvailable ? 'S√≠' : 'No'}`);
      console.log(`   - Imagen: ${sampleProduct.image ? 'Presente' : 'No presente'}`);
      console.log(`   - Descripci√≥n: ${sampleProduct.description ? 'Presente' : 'No presente'}`);
      console.log(`   - Al√©rgenos: ${sampleProduct.allergens ? sampleProduct.allergens.length : 0} elementos`);
    }
    
    // 3. Verificar categor√≠as para mostrar nombres
    console.log('\n3Ô∏è‚É£ Verificando categor√≠as...');
    categoriesRes.data.forEach(category => {
      console.log(`   - ${category.name} (ID: ${category.id})`);
    });
    
    // 4. Verificar tipos de productos
    console.log('\n4Ô∏è‚É£ Analizando tipos de productos...');
    const productTypes = [...new Set(productsRes.data.map(p => p.type))];
    productTypes.forEach(type => {
      const count = productsRes.data.filter(p => p.type === type).length;
      console.log(`   - ${type}: ${count} productos`);
    });
    
    // 5. Verificar productos con im√°genes
    console.log('\n5Ô∏è‚É£ Verificando productos con im√°genes...');
    const productsWithImages = productsRes.data.filter(p => p.image);
    const productsWithoutImages = productsRes.data.filter(p => !p.image);
    console.log(`   - Con imagen: ${productsWithImages.length}`);
    console.log(`   - Sin imagen: ${productsWithoutImages.length}`);
    
    // 6. Verificar productos con al√©rgenos
    console.log('\n6Ô∏è‚É£ Verificando productos con al√©rgenos...');
    const productsWithAllergens = productsRes.data.filter(p => p.allergens && p.allergens.length > 0);
    console.log(`   - Con al√©rgenos: ${productsWithAllergens.length}`);
    if (productsWithAllergens.length > 0) {
      console.log('   üìù Productos con al√©rgenos:');
      productsWithAllergens.forEach(product => {
        console.log(`      - ${product.name}: ${product.allergens.join(', ')}`);
      });
    }
    
    console.log('\nüéâ PRUEBA COMPLETADA');
    console.log('===================');
    console.log('‚úÖ El cat√°logo mejorado est√° listo para mostrar:');
    console.log('   - Tarjetas de productos con dise√±o moderno');
    console.log('   - Informaci√≥n completa de cada producto');
    console.log('   - Im√°genes con placeholders elegantes');
    console.log('   - Badges de categor√≠a y tipo');
    console.log('   - Estados de disponibilidad claros');
    console.log('   - Informaci√≥n de al√©rgenos');
    console.log('   - Tiempo de preparaci√≥n');
    console.log('   - Scroll vertical para navegaci√≥n');
    console.log('   - Dise√±o responsive para m√≥viles');
    
    console.log('\nüí° CARACTER√çSTICAS DEL NUEVO DISE√ëO:');
    console.log('   - Grid responsive que se adapta al tama√±o de pantalla');
    console.log('   - Tarjetas con hover effects y animaciones');
    console.log('   - Informaci√≥n organizada jer√°rquicamente');
    console.log('   - Colores diferenciados por tipo de producto');
    console.log('   - Scroll suave en contenedor principal');
    console.log('   - Botones de acci√≥n claramente diferenciados');
    
  } catch (error) {
    console.error('\n‚ùå ERROR EN LA PRUEBA:');
    console.error(`Status: ${error.response?.status || 'N/A'}`);
    console.error(`Message: ${error.response?.data?.message || error.message}`);
    
    if (error.response?.data) {
      console.error('Detalles:', JSON.stringify(error.response.data, null, 2));
    }
  }
}

testEnhancedCatalog().catch(console.error);








