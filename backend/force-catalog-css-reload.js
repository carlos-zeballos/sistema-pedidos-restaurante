const fs = require('fs');
const path = require('path');

console.log('üîÑ FORZANDO RECARGA DE ESTILOS CSS DEL CAT√ÅLOGO');
console.log('===============================================');

// Funci√≥n para agregar un timestamp a los estilos CSS del cat√°logo
function addTimestampToCatalogCSS() {
  const cssPath = path.join(__dirname, '../frontend/src/components/Catalog.css');
  
  try {
    // Leer el archivo CSS actual
    let cssContent = fs.readFileSync(cssPath, 'utf8');
    
    // Agregar un comentario con timestamp al final
    const timestamp = new Date().toISOString();
    const timestampComment = `\n\n/* CSS del cat√°logo actualizado: ${timestamp} */\n`;
    
    // Verificar si ya existe un timestamp y reemplazarlo
    if (cssContent.includes('/* CSS del cat√°logo actualizado:')) {
      cssContent = cssContent.replace(/\/\* CSS del cat√°logo actualizado:.*?\*\//s, `/* CSS del cat√°logo actualizado: ${timestamp} */`);
    } else {
      cssContent += timestampComment;
    }
    
    // Escribir el archivo actualizado
    fs.writeFileSync(cssPath, cssContent);
    
    console.log('‚úÖ CSS del cat√°logo actualizado con timestamp:', timestamp);
    console.log('üìÅ Archivo:', cssPath);
    
    // Verificar que los estilos cr√≠ticos est√©n presentes
    const criticalStyles = [
      'width: 100vw !important',
      'min-height: calc(100vh - 20px) !important',
      'grid-template-columns: repeat(auto-fill, minmax(280px, 1fr)) !important'
    ];
    
    console.log('\nüîç Verificando estilos cr√≠ticos del cat√°logo:');
    criticalStyles.forEach(style => {
      if (cssContent.includes(style)) {
        console.log(`‚úÖ ${style}`);
      } else {
        console.log(`‚ùå ${style}`);
      }
    });
    
    console.log('\nüí° INSTRUCCIONES PARA APLICAR LOS CAMBIOS:');
    console.log('1. Guarda todos los archivos en tu editor');
    console.log('2. Presiona Ctrl+F5 (o Cmd+Shift+R en Mac) para recargar sin cach√©');
    console.log('3. O abre las herramientas de desarrollador (F12)');
    console.log('4. Haz clic derecho en el bot√≥n de recargar y selecciona "Vaciar cach√© y recargar"');
    console.log('5. Verifica que el √°rea de productos del cat√°logo ahora ocupe toda la pantalla');
    
    console.log('\nüéØ CAMBIOS QUE DEBER√çAS VER EN EL CAT√ÅLOGO:');
    console.log('- El contenedor del cat√°logo ocupa toda la pantalla');
    console.log('- Las tarjetas de productos son m√°s compactas');
    console.log('- Hay m√°s productos visibles simult√°neamente');
    console.log('- El grid se adapta autom√°ticamente al espacio disponible');
    console.log('- Mejor aprovechamiento del espacio de pantalla');
    
    console.log('\nüìä CONFIGURACI√ìN APLICADA:');
    console.log('- Ancho: 100vw (pantalla completa)');
    console.log('- Altura: calc(100vh - 20px) (casi toda la pantalla)');
    console.log('- Grid: minmax(280px, 1fr) (m√°s productos por fila)');
    console.log('- Gap: 15px (espaciado optimizado)');
    console.log('- Estilos forzados con !important');
    
  } catch (error) {
    console.error('‚ùå Error actualizando CSS del cat√°logo:', error.message);
  }
}

// Ejecutar la funci√≥n
addTimestampToCatalogCSS();

console.log('\nüöÄ PROCESO COMPLETADO');
console.log('=====================');
console.log('Los estilos CSS del cat√°logo han sido actualizados y forzados a recargarse.');
console.log('Si a√∫n no ves los cambios, sigue las instrucciones de recarga arriba.');








