#!/usr/bin/env node

const axios = require('axios');

const API_BASE_URL = 'http://localhost:3001';

// Configurar axios
const api = axios.create({
  baseURL: API_BASE_URL,
  headers: {
    'Content-Type': 'application/json',
  },
});

let authToken = null;
let currentUser = null;

async function testSystem() {
  console.log('üß™ Iniciando pruebas del sistema...\n');

  try {
    // 1. Probar conexi√≥n al servidor
    console.log('1Ô∏è‚É£ Probando conexi√≥n al servidor...');
    await api.get('/health');
    console.log('‚úÖ Servidor respondiendo correctamente\n');

    // 2. Probar autenticaci√≥n
    console.log('2Ô∏è‚É£ Probando autenticaci√≥n...');
    const loginResponse = await api.post('/auth/login', {
      username: 'waiter',
      password: '123456'
    });
    
    authToken = loginResponse.data.access_token;
    currentUser = loginResponse.data.user;
    
    // Configurar token para siguientes requests
    api.defaults.headers.common['Authorization'] = `Bearer ${authToken}`;
    
    console.log(`‚úÖ Autenticaci√≥n exitosa - Usuario: ${currentUser.name}\n`);

    // 3. Probar obtenci√≥n de mesas
    console.log('3Ô∏è‚É£ Probando obtenci√≥n de mesas...');
    const tablesResponse = await api.get('/tables');
    console.log(`‚úÖ ${tablesResponse.data.length} mesas obtenidas\n`);

    // 4. Probar obtenci√≥n de categor√≠as
    console.log('4Ô∏è‚É£ Probando obtenci√≥n de categor√≠as...');
    const categoriesResponse = await api.get('/catalog/categories');
    console.log(`‚úÖ ${categoriesResponse.data.length} categor√≠as obtenidas\n`);

    // 5. Probar obtenci√≥n de productos
    console.log('5Ô∏è‚É£ Probando obtenci√≥n de productos...');
    const productsResponse = await api.get('/catalog/products');
    console.log(`‚úÖ ${productsResponse.data.length} productos obtenidos\n`);

    // 6. Probar creaci√≥n de orden
    console.log('6Ô∏è‚É£ Probando creaci√≥n de orden...');
    const orderData = {
      tableId: 1,
      waiterId: currentUser.id,
      items: [
        {
          productId: 1,
          quantity: 2,
          price: 12.99
        },
        {
          productId: 6,
          quantity: 1,
          price: 3.99
        }
      ],
      total: 29.97,
      notes: 'Orden de prueba del sistema'
    };

    const orderResponse = await api.post('/orders', orderData);
    console.log(`‚úÖ Orden creada exitosamente - ID: ${orderResponse.data.id}\n`);

    // 7. Probar obtenci√≥n de √≥rdenes
    console.log('7Ô∏è‚É£ Probando obtenci√≥n de √≥rdenes...');
    const ordersResponse = await api.get('/orders');
    console.log(`‚úÖ ${ordersResponse.data.length} √≥rdenes obtenidas\n`);

    // 8. Probar actualizaci√≥n de estado de orden
    console.log('8Ô∏è‚É£ Probando actualizaci√≥n de estado de orden...');
    await api.put(`/orders/${orderResponse.data.id}/status`, { status: 'PREPARING' });
    console.log('‚úÖ Estado de orden actualizado a PREPARING\n');

    // 9. Probar vista de cocina
    console.log('9Ô∏è‚É£ Probando vista de cocina...');
    const kitchenResponse = await api.get('/orders/kitchen');
    console.log(`‚úÖ ${kitchenResponse.data.length} √≥rdenes en cocina\n`);

    // 10. Probar finalizaci√≥n de orden
    console.log('üîü Probando finalizaci√≥n de orden...');
    await api.put(`/orders/${orderResponse.data.id}/status`, { status: 'READY' });
    await api.put(`/orders/${orderResponse.data.id}/status`, { status: 'DELIVERED' });
    console.log('‚úÖ Orden completada exitosamente\n');

    console.log('üéâ ¬°Todas las pruebas pasaron exitosamente!');
    console.log('üöÄ El sistema est√° funcionando correctamente');
    console.log('\nüìã Resumen de funcionalidades probadas:');
    console.log('   ‚úÖ Conexi√≥n al servidor');
    console.log('   ‚úÖ Autenticaci√≥n JWT');
    console.log('   ‚úÖ Gesti√≥n de mesas');
    console.log('   ‚úÖ Cat√°logo de productos');
    console.log('   ‚úÖ Creaci√≥n de √≥rdenes');
    console.log('   ‚úÖ Gesti√≥n de estados');
    console.log('   ‚úÖ Vista de cocina');
    console.log('   ‚úÖ Finalizaci√≥n de √≥rdenes');

  } catch (error) {
    console.error('‚ùå Error durante las pruebas:', error.response?.data || error.message);
    console.log('\nüîß Posibles soluciones:');
    console.log('   1. Aseg√∫rate de que el servidor est√© corriendo (npm run start:dev)');
    console.log('   2. Verifica que la base de datos est√© configurada correctamente');
    console.log('   3. Ejecuta npm run db:seed para poblar datos de prueba');
    console.log('   4. Revisa los logs del servidor para m√°s detalles');
  }
}

// Ejecutar pruebas
testSystem();
