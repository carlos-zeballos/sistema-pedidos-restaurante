const { Client } = require('pg');
const axios = require('axios');

const client = new Client({
  connectionString: 'postgresql://postgres.jfvkhoxhiudtxskylnrv:muchachos98356@aws-1-sa-east-1.pooler.supabase.com:6543/postgres?sslmode=disable'
});

const API_BASE_URL = 'https://sistema-pedidos-restaurante.onrender.com';

async function comprehensiveSystemAudit() {
  console.log('üîç AUDITOR√çA COMPLETA DEL SISTEMA...\n');

  try {
    await client.connect();
    console.log('‚úÖ Conexi√≥n a base de datos exitosa');

    // 1. AUDITOR√çA DE BASE DE DATOS
    console.log('1Ô∏è‚É£ AUDITOR√çA DE BASE DE DATOS:');
    console.log('==============================');

    // Verificar integridad referencial
    console.log('\nüîó Verificando integridad referencial...');
    
    // Productos con categor√≠as inexistentes
    const orphanProducts = await client.query(`
      SELECT p.id, p.code, p.name, p."categoryId"
      FROM "Product" p
      LEFT JOIN "Category" c ON p."categoryId" = c.id
      WHERE c.id IS NULL;
    `);
    
    if (orphanProducts.rows.length > 0) {
      console.log(`‚ùå Productos con categor√≠as inexistentes: ${orphanProducts.rows.length}`);
      orphanProducts.rows.forEach(p => {
        console.log(`   - ${p.code}: ${p.name} (categor√≠a: ${p.categoryId})`);
      });
    } else {
      console.log('‚úÖ Todos los productos tienen categor√≠as v√°lidas');
    }

    // Combos con categor√≠as inexistentes
    const orphanCombos = await client.query(`
      SELECT co.id, co.code, co.name, co."categoryId"
      FROM "Combo" co
      LEFT JOIN "Category" c ON co."categoryId" = c.id
      WHERE c.id IS NULL;
    `);
    
    if (orphanCombos.rows.length > 0) {
      console.log(`‚ùå Combos con categor√≠as inexistentes: ${orphanCombos.rows.length}`);
      orphanCombos.rows.forEach(co => {
        console.log(`   - ${co.code}: ${co.name} (categor√≠a: ${co.categoryId})`);
      });
    } else {
      console.log('‚úÖ Todos los combos tienen categor√≠as v√°lidas');
    }

    // Componentes de combo con combos inexistentes
    const orphanComponents = await client.query(`
      SELECT cc.id, cc.name, cc."comboId"
      FROM "ComboComponent" cc
      LEFT JOIN "Combo" co ON cc."comboId" = co.id
      WHERE co.id IS NULL;
    `);
    
    if (orphanComponents.rows.length > 0) {
      console.log(`‚ùå Componentes con combos inexistentes: ${orphanComponents.rows.length}`);
      orphanComponents.rows.forEach(cc => {
        console.log(`   - ${cc.name} (combo: ${cc.comboId})`);
      });
    } else {
      console.log('‚úÖ Todos los componentes tienen combos v√°lidos');
    }

    // 2. AUDITOR√çA DE DATOS INCONSISTENTES
    console.log('\n2Ô∏è‚É£ AUDITOR√çA DE DATOS INCONSISTENTES:');
    console.log('=====================================');

    // Productos con precios negativos o cero
    const invalidPrices = await client.query(`
      SELECT id, code, name, price
      FROM "Product"
      WHERE price <= 0;
    `);
    
    if (invalidPrices.rows.length > 0) {
      console.log(`‚ùå Productos con precios inv√°lidos: ${invalidPrices.rows.length}`);
      invalidPrices.rows.forEach(p => {
        console.log(`   - ${p.code}: ${p.name} (precio: $${p.price})`);
      });
    } else {
      console.log('‚úÖ Todos los productos tienen precios v√°lidos');
    }

    // Combos con precios base inv√°lidos
    const invalidComboPrices = await client.query(`
      SELECT id, code, name, "basePrice"
      FROM "Combo"
      WHERE "basePrice" <= 0;
    `);
    
    if (invalidComboPrices.rows.length > 0) {
      console.log(`‚ùå Combos con precios base inv√°lidos: ${invalidComboPrices.rows.length}`);
      invalidComboPrices.rows.forEach(co => {
        console.log(`   - ${co.code}: ${co.name} (precio base: $${co.basePrice})`);
      });
    } else {
      console.log('‚úÖ Todos los combos tienen precios base v√°lidos');
    }

    // C√≥digos duplicados
    const duplicateProductCodes = await client.query(`
      SELECT code, COUNT(*) as count
      FROM "Product"
      GROUP BY code
      HAVING COUNT(*) > 1;
    `);
    
    if (duplicateProductCodes.rows.length > 0) {
      console.log(`‚ùå C√≥digos de productos duplicados: ${duplicateProductCodes.rows.length}`);
      duplicateProductCodes.rows.forEach(d => {
        console.log(`   - ${d.code}: ${d.count} productos`);
      });
    } else {
      console.log('‚úÖ No hay c√≥digos de productos duplicados');
    }

    const duplicateComboCodes = await client.query(`
      SELECT code, COUNT(*) as count
      FROM "Combo"
      GROUP BY code
      HAVING COUNT(*) > 1;
    `);
    
    if (duplicateComboCodes.rows.length > 0) {
      console.log(`‚ùå C√≥digos de combos duplicados: ${duplicateComboCodes.rows.length}`);
      duplicateComboCodes.rows.forEach(d => {
        console.log(`   - ${d.code}: ${d.count} combos`);
      });
    } else {
      console.log('‚úÖ No hay c√≥digos de combos duplicados');
    }

    // 3. AUDITOR√çA DE FUNCIONES RPC
    console.log('\n3Ô∏è‚É£ AUDITOR√çA DE FUNCIONES RPC:');
    console.log('===============================');

    const rpcFunctions = [
      'create_order_with_items',
      'combo_create_or_update_basic',
      'combo_create_or_update_component',
      'get_orders_report_by_date',
      'get_payment_methods_report_by_date',
      'get_delivery_payments_report_by_date',
      'soft_delete_order'
    ];

    for (const funcName of rpcFunctions) {
      const funcCheck = await client.query(`
        SELECT routine_name, routine_type
        FROM information_schema.routines 
        WHERE routine_name = $1 
        AND routine_schema = 'public';
      `, [funcName]);
      
      if (funcCheck.rows.length > 0) {
        console.log(`‚úÖ ${funcName} - Existe`);
      } else {
        console.log(`‚ùå ${funcName} - NO EXISTE`);
      }
    }

    // 4. AUDITOR√çA DE ENDPOINTS
    console.log('\n4Ô∏è‚É£ AUDITOR√çA DE ENDPOINTS:');
    console.log('==========================');

    try {
      // Verificar salud del backend
      const healthResponse = await axios.get(`${API_BASE_URL}/health`);
      console.log('‚úÖ Backend saludable:', healthResponse.data);

      // Obtener token de autenticaci√≥n
      const loginResponse = await axios.post(`${API_BASE_URL}/auth/login`, {
        username: 'testuser',
        password: 'test123'
      });
      const token = loginResponse.data.access_token;
      console.log('‚úÖ Autenticaci√≥n exitosa');

      const headers = {
        'Authorization': `Bearer ${token}`,
        'Content-Type': 'application/json'
      };

      // Probar endpoints cr√≠ticos
      const endpoints = [
        { method: 'GET', path: '/catalog/public/categories', name: 'Categor√≠as p√∫blicas' },
        { method: 'GET', path: '/catalog/public/products', name: 'Productos p√∫blicos' },
        { method: 'GET', path: '/catalog/public/combos', name: 'Combos p√∫blicos' },
        { method: 'GET', path: '/catalog/categories', name: 'Categor√≠as (admin)' },
        { method: 'GET', path: '/catalog/products', name: 'Productos (admin)' },
        { method: 'GET', path: '/catalog/combos', name: 'Combos (admin)' },
        { method: 'GET', path: '/orders/kitchen', name: '√ìrdenes de cocina' },
        { method: 'GET', path: '/reports/orders', name: 'Reportes de √≥rdenes' }
      ];

      for (const endpoint of endpoints) {
        try {
          const response = await axios({
            method: endpoint.method,
            url: `${API_BASE_URL}${endpoint.path}`,
            headers: headers,
            timeout: 10000
          });
          console.log(`‚úÖ ${endpoint.name}: ${response.status}`);
        } catch (error) {
          console.log(`‚ùå ${endpoint.name}: ${error.response?.status || 'ERROR'} - ${error.message}`);
        }
      }

    } catch (error) {
      console.log('‚ùå Error conectando con el backend:', error.message);
    }

    // 5. AUDITOR√çA DE CONFIGURACI√ìN
    console.log('\n5Ô∏è‚É£ AUDITOR√çA DE CONFIGURACI√ìN:');
    console.log('===============================');

    // Verificar configuraci√≥n de espacios
    const spacesConfig = await client.query(`
      SELECT 
        type,
        COUNT(*) as count,
        COUNT(CASE WHEN "isActive" = true THEN 1 END) as active_count
      FROM "Space"
      GROUP BY type
      ORDER BY type;
    `);
    
    console.log('üè¢ Configuraci√≥n de espacios:');
    spacesConfig.rows.forEach(space => {
      console.log(`   - ${space.type}: ${space.count} total, ${space.active_count} activos`);
    });

    // Verificar configuraci√≥n de categor√≠as
    const categoriesConfig = await client.query(`
      SELECT 
        COUNT(*) as total_categories,
        COUNT(CASE WHEN "isActive" = true THEN 1 END) as active_categories
      FROM "Category";
    `);
    
    console.log(`üìÇ Categor√≠as: ${categoriesConfig.rows[0].total_categories} total, ${categoriesConfig.rows[0].active_categories} activas`);

    // Verificar configuraci√≥n de productos
    const productsConfig = await client.query(`
      SELECT 
        COUNT(*) as total_products,
        COUNT(CASE WHEN "isEnabled" = true THEN 1 END) as enabled_products,
        COUNT(CASE WHEN "isAvailable" = true THEN 1 END) as available_products
      FROM "Product";
    `);
    
    console.log(`üõí Productos: ${productsConfig.rows[0].total_products} total, ${productsConfig.rows[0].enabled_products} habilitados, ${productsConfig.rows[0].available_products} disponibles`);

    // Verificar configuraci√≥n de combos
    const combosConfig = await client.query(`
      SELECT 
        COUNT(*) as total_combos,
        COUNT(CASE WHEN "isEnabled" = true THEN 1 END) as enabled_combos,
        COUNT(CASE WHEN "isAvailable" = true THEN 1 END) as available_combos
      FROM "Combo";
    `);
    
    console.log(`üç± Combos: ${combosConfig.rows[0].total_combos} total, ${combosConfig.rows[0].enabled_combos} habilitados, ${combosConfig.rows[0].available_combos} disponibles`);

    // 6. RESUMEN FINAL
    console.log('\n6Ô∏è‚É£ RESUMEN DE AUDITOR√çA:');
    console.log('=========================');

    const totalIssues = orphanProducts.rows.length + 
                       orphanCombos.rows.length + 
                       orphanComponents.rows.length +
                       invalidPrices.rows.length +
                       invalidComboPrices.rows.length +
                       duplicateProductCodes.rows.length +
                       duplicateComboCodes.rows.length;

    if (totalIssues === 0) {
      console.log('\nüéâ ¬°PERFECTO! No se encontraron problemas cr√≠ticos en el sistema');
      console.log('‚úÖ Base de datos: Integridad referencial correcta');
      console.log('‚úÖ Datos: Precios y c√≥digos v√°lidos');
      console.log('‚úÖ Funciones RPC: Todas operativas');
      console.log('‚úÖ Endpoints: Funcionando correctamente');
      console.log('‚úÖ Configuraci√≥n: Datos consistentes');
    } else {
      console.log(`\n‚ö†Ô∏è Se encontraron ${totalIssues} problemas que requieren atenci√≥n:`);
      if (orphanProducts.rows.length > 0) console.log(`   - ${orphanProducts.rows.length} productos con categor√≠as inexistentes`);
      if (orphanCombos.rows.length > 0) console.log(`   - ${orphanCombos.rows.length} combos con categor√≠as inexistentes`);
      if (orphanComponents.rows.length > 0) console.log(`   - ${orphanComponents.rows.length} componentes con combos inexistentes`);
      if (invalidPrices.rows.length > 0) console.log(`   - ${invalidPrices.rows.length} productos con precios inv√°lidos`);
      if (invalidComboPrices.rows.length > 0) console.log(`   - ${invalidComboPrices.rows.length} combos con precios inv√°lidos`);
      if (duplicateProductCodes.rows.length > 0) console.log(`   - ${duplicateProductCodes.rows.length} c√≥digos de productos duplicados`);
      if (duplicateComboCodes.rows.length > 0) console.log(`   - ${duplicateComboCodes.rows.length} c√≥digos de combos duplicados`);
    }

  } catch (error) {
    console.error('‚ùå Error durante la auditor√≠a:', error.message);
  } finally {
    await client.end();
  }
}

comprehensiveSystemAudit();


