require('dotenv').config();
const axios = require('axios');

const API_BASE_URL = process.env.API_BASE_URL || 'http://localhost:3000';

async function testImprovedReports() {
  console.log('üöÄ Probando reportes mejorados...\n');

  try {
    // 1. Obtener √≥rdenes
    console.log('1Ô∏è‚É£ OBTENIENDO √ìRDENES:');
    const ordersResponse = await axios.get(`${API_BASE_URL}/orders`);
    const orders = ordersResponse.data;
    
    console.log(`   ‚úÖ ${orders.length} √≥rdenes obtenidas`);

    // 2. Simular an√°lisis mejorado
    console.log('\n2Ô∏è‚É£ AN√ÅLISIS MEJORADO DE PRODUCTOS:');
    const productStats = {};
    let totalSales = 0;
    let totalItems = 0;
    
    orders.forEach(order => {
      totalSales += order.totalAmount || 0;
      
      if (order.items && Array.isArray(order.items)) {
        order.items.forEach(item => {
          totalItems += item.quantity || 1;
          
          if (item.name) {
            const key = `product_${item.name}`;
            if (!productStats[key]) {
              productStats[key] = {
                name: item.name,
                quantity: 0,
                totalAmount: 0,
                orders: 0
              };
            }
            productStats[key].quantity += item.quantity || 1;
            productStats[key].totalAmount += item.totalprice || 0;
            productStats[key].orders += 1;
          }
        });
      }
    });

    const sortedProducts = Object.values(productStats)
      .sort((a, b) => b.quantity - a.quantity)
      .slice(0, 10);

    console.log(`   üìä Productos √∫nicos: ${Object.keys(productStats).length}`);
    console.log(`   üì¶ Total items vendidos: ${totalItems}`);
    console.log(`   üí∞ Total ventas: $${totalSales.toFixed(2)}`);

    // 3. Mostrar top productos con m√©tricas mejoradas
    console.log('\n3Ô∏è‚É£ TOP PRODUCTOS CON M√âTRICAS MEJORADAS:');
    if (sortedProducts.length > 0) {
      sortedProducts.forEach((product, index) => {
        const avgPrice = product.totalAmount / product.quantity;
        const percentage = (product.totalAmount / totalSales) * 100;
        
        console.log(`\n   üèÜ #${index + 1} ${product.name}`);
        console.log(`      üí∞ Total Ventas: $${product.totalAmount.toFixed(2)}`);
        console.log(`      üì¶ Cantidad: ${product.quantity} unidades`);
        console.log(`      üìã √ìrdenes: ${product.orders}`);
        console.log(`      üíµ Precio Promedio: $${avgPrice.toFixed(2)}`);
        console.log(`      üìä % del Total: ${percentage.toFixed(1)}%`);
        console.log(`      üìà Barra de Progreso: ${'‚ñà'.repeat(Math.floor(percentage / 2))}${'‚ñë'.repeat(50 - Math.floor(percentage / 2))}`);
      });
    } else {
      console.log('   ‚ùå No se encontraron productos');
    }

    // 4. Estad√≠sticas del d√≠a
    console.log('\n4Ô∏è‚É£ ESTAD√çSTICAS DEL D√çA:');
    const today = new Date().toISOString().split('T')[0];
    const todayOrders = orders.filter(order => {
      const orderDate = new Date(order.createdAt).toISOString().split('T')[0];
      return orderDate === today;
    });

    const todaySales = todayOrders.reduce((sum, order) => sum + (order.totalAmount || 0), 0);
    const todayItems = todayOrders.reduce((sum, order) => {
      return sum + (order.items ? order.items.reduce((itemSum, item) => itemSum + (item.quantity || 1), 0) : 0);
    }, 0);

    console.log(`   üìÖ Fecha: ${today}`);
    console.log(`   üì¶ √ìrdenes del d√≠a: ${todayOrders.length}`);
    console.log(`   üí∞ Ventas del d√≠a: $${todaySales.toFixed(2)}`);
    console.log(`   üõçÔ∏è Items vendidos: ${todayItems}`);

    // 5. M√©tricas de rendimiento
    console.log('\n5Ô∏è‚É£ M√âTRICAS DE RENDIMIENTO:');
    if (sortedProducts.length > 0) {
      const topProduct = sortedProducts[0];
      const avgOrderValue = totalSales / orders.length;
      const avgItemsPerOrder = totalItems / orders.length;
      
      console.log(`   ü•á Producto estrella: ${topProduct.name} (${topProduct.quantity} unidades)`);
      console.log(`   üíµ Valor promedio por orden: $${avgOrderValue.toFixed(2)}`);
      console.log(`   üì¶ Items promedio por orden: ${avgItemsPerOrder.toFixed(1)}`);
      console.log(`   üéØ Producto m√°s rentable: ${sortedProducts.sort((a, b) => b.totalAmount - a.totalAmount)[0].name}`);
    }

    console.log('\nüìä RESUMEN FINAL:');
    console.log('=' .repeat(50));
    console.log('‚úÖ REPORTES MEJORADOS FUNCIONANDO');
    console.log(`‚úÖ ${orders.length} √≥rdenes analizadas`);
    console.log(`‚úÖ ${Object.keys(productStats).length} productos √∫nicos`);
    console.log(`‚úÖ $${totalSales.toFixed(2)} en ventas totales`);
    console.log(`‚úÖ ${totalItems} items vendidos`);
    console.log('‚úÖ M√©tricas avanzadas calculadas');
    console.log('‚úÖ An√°lisis de rendimiento completo');

  } catch (error) {
    console.error('‚ùå Error durante la prueba:', error.response?.data?.message || error.message);
  }
}

testImprovedReports();









